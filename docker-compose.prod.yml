version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: yedt-backend-prod
    restart: always
    volumes:
      - ./logs:/app/logs
    ports:
      - "${PORT:-5000}:${PORT:-5000}"
    depends_on:
      - postgres
    networks:
      - yedt-network
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 200M
    # Güvenlik ayarları
    security_opt:
      - no-new-privileges:true
    # Üretim ortamında root olmayan kullanıcı ile çalışma (Dockerfile'da tanımlandı)
    user: appuser
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT:-5000}/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: yedt-postgres-prod
    restart: always
    volumes:
      - postgres-data-prod:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-prod_secure_password_placeholder}
      POSTGRES_DB: ${DB_NAME:-yedt_case}
      PGDATA: /var/lib/postgresql/data/pgdata
    # Üretim ortamında port 5432'yi dışarıya açmak yerine sadece backend servisine açıyoruz
    # ports:
    #   - "${DB_PORT:-5432}:5432"
    networks:
      - yedt-network
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 500M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # PostgreSQL yedekleme servisi
  postgres-backup:
    image: postgres:15-alpine
    container_name: yedt-postgres-backup
    volumes:
      - ./backups:/backups
    networks:
      - yedt-network
    depends_on:
      - postgres
    environment:
      PGHOST: postgres
      PGUSER: ${DB_USER:-postgres}
      PGPASSWORD: ${DB_PASSWORD:-prod_secure_password_placeholder}
      PGDATABASE: ${DB_NAME:-yedt_case}
    command: |
      sh -c '
        echo "Veritabanı yedekleme servisi başlatılıyor..."
        while :; do
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "Veritabanı yedeği alınıyor: $TIMESTAMP"
          pg_dump -h postgres -U $$PGUSER $$PGDATABASE | gzip > /backups/backup_$$TIMESTAMP.sql.gz
          echo "Yedekleme tamamlandı: /backups/backup_$$TIMESTAMP.sql.gz"
          echo "Bir sonraki yedekleme için 24 saat bekleniyor..."
          sleep 86400
        done
      '
    restart: always

networks:
  yedt-network:
    driver: bridge

volumes:
  postgres-data-prod:
    driver: local