version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: yedt-backend-dev
    restart: unless-stopped
    volumes:
      - ./:/app
      - /app/node_modules
    ports:
      - "${PORT:-5000}:${PORT:-5000}"
    depends_on:
      - postgres
    networks:
      - yedt-network
    env_file:
      - .env.development
    environment:
      - NODE_ENV=development
    command: npm run dev
    # Hot-reload için ts-node-dev zaten kullanılıyor

  postgres:
    image: postgres:15-alpine
    container_name: yedt-postgres-dev
    restart: unless-stopped
    volumes:
      - postgres-data-dev:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password}
      POSTGRES_DB: ${DB_NAME:-yedt_case}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - yedt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Veritabanı yönetimi için PgAdmin (geliştirme ortamı için)
  pgadmin:
    image: dpage/pgadmin4
    container_name: yedt-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - yedt-network
    depends_on:
      - postgres

networks:
  yedt-network:
    driver: bridge

volumes:
  postgres-data-dev:
    driver: local
  pgadmin-data:
    driver: local